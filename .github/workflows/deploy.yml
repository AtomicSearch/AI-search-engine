name: Build and Deploy to DigitalOcean

on:
  push:
    branches: ["main"]

env:
  DOCKER_REPO: atomicsearch/massiveprediction
  SERVICE_NAME: production-server

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout files
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DOCKER_REPO }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout files
        uses: actions/checkout@v4

      - name: Install Docker and Docker Compose on Droplet
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            # Check if Docker is installed, if not, install it
            if ! command -v docker &> /dev/null; then
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
            fi

            # Check if Docker Compose is installed, if not, install it
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            # Login to Docker Hub
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

            # Initialize Docker Swarm (if not already initialized)
            if ! docker node ls > /dev/null 2>&1; then
              docker swarm init
            fi

            # Check if the stack is already deployed
            if ! docker stack ls | grep -q ${{ env.SERVICE_NAME }}; then
              # Deploy the stack using Docker Compose
              docker stack deploy --with-registry-auth --compose-file docker-compose.production.yml ${{ env.SERVICE_NAME }}
            else
              # Update the existing stack
              docker service update --with-registry-auth --image ${{ env.DOCKER_REPO }}:latest ${{ env.SERVICE_NAME }}_web
            fi

            # Prune unused Docker resources
            docker system prune -f
